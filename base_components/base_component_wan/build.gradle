apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven'
uploadArchives {
    //dependencies path: com.jaydroid.base_component_wan:base_component_wan:1.0.0
    repositories.mavenDeployer {
        // 本地路径
        repository(url: MAVEN_LOCAL_REPO_PATH)
        // 唯一标识
        pom.groupId = "com.jaydroid.base_component_wan"
        // 项目名称
        pom.artifactId = "base_component_wan"
        // 版本号
        pom.version = "2.0.0"
    }
}

android {
    //给 Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "${project.name.toLowerCase().replaceAll("-", "_")}_"

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        consumerProguardFiles 'consumer-rules.pro'
        //Arouter
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }


    buildTypes {
        //打包命令：
        // ./gradlew :app:wan:assembleDebug
        // ./gradlew :app:wan:assembleRelease

        debug {

            buildConfigField "boolean", "LOG_DEBUG", "true"  // 显示Log
            // Zipalign优化 true
            zipAlignEnabled false
            // 移除无用的resource文件 true  Resource shrinker cannot be used for libraries.
//            shrinkResources true
            // 启用Android插件压缩器
            // useProguard true
            // 代码压缩/是否进行混淆 true
            minifyEnabled false
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明,后一部分是我们项目里的自定义的混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"  // 显示Log
            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件 true  Resource shrinker cannot be used for libraries.
//            shrinkResources true
            // 代码压缩/是否进行混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    /**
     * 公共业务组件
     */
    api project(path: ':base_components:base_component')
//    api rootProject.ext.dependencies['base_component']

    //初始的依赖
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies['kotlin-stdlib-jdk7']
    implementation rootProject.ext.dependencies['appcompat']
    implementation rootProject.ext.dependencies['core-ktx']
    implementation rootProject.ext.dependencies['constraintlayout']
    testImplementation rootProject.ext.dependencies['junit']
    androidTestImplementation rootProject.ext.dependencies['junit-androidx']
    androidTestImplementation rootProject.ext.dependencies['espresso-core-androidx']
    //其它依赖
    //arouter-compiler 的注解依赖需要所有使用 ARouter 的 model 都添加依赖
    kapt rootProject.ext.dependencies['arouter-compiler']
}


