apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven'
uploadArchives {
    //dependencies path: com.jaydroid.base_component:base_component:1.0.0
    repositories.mavenDeployer {
        // 本地路径
        repository(url: MAVEN_LOCAL_REPO_PATH)
        // 唯一标识
        pom.groupId = "com.jaydroid.base_component"
        // 项目名称
        pom.artifactId = "base_component"
        // 版本号
        pom.version = "2.0.0"
    }
}

android {

    //给 Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "${project.name.toLowerCase().replaceAll("-", "_")}_"

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        //Instrumentation Test class
        testInstrumentationRunner rootProject.ext.androidJUnitRunner
        //consumerProguardFiles  打包库Module发布AAR时配置的混淆文件，如果没有配置这个属性，在其他项目引用AndroidLib 项目且开启minifyEnabled时或许会报错，因为主项目不会自主引入依赖库的ProguardFile文件，必须在主项目中配置consumerProguardFiles节点，这样主项目就会引入依赖库的gradle文件中的（默认为release变体）下ProguardFile。
        consumerProguardFiles 'consumer-rules.pro'

        //Arouter
        /**
         * ARouter:path必须以'/'开头，并且包含多于2 '/'的内容!
         * ARouter:默认会用你申明的path的第一个/后面的字符用作group，不同组件之间的group不能相同
         */
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes.each {

        Properties props
        if (it.name == "debug") {
            props = rootProject.ext.environment['debugEnvironmentProps']
        } else {
            props = rootProject.ext.environment['liveEnvironmentProps']
        }

        it.buildConfigField("String", "BASE_URL", String.format(Locale.getDefault(), "\"%s\"", props["base_url"]))

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    /** =========================== 组件依赖 ========================= */
    //基础功能组件
    api project(path: ':base_libs:base_lib') //本地module
//    api rootProject.ext.dependencies['base_lib'] //远程pom


    /** =========================== 远程依赖 ========================= */
    implementation rootProject.ext.kotlinStdlibJdk7
    implementation rootProject.ext.appcompat
    implementation rootProject.ext.coreKtx
    implementation rootProject.ext.constraintLayout
    testImplementation rootProject.ext.junit
    androidTestImplementation rootProject.ext.junitX
    androidTestImplementation rootProject.ext.espressoCore

    //persistentcookiejar
    api rootProject.ext.persistentcookiejar
    //statusbarUtil
    api rootProject.ext.statusbarUtil
    //eventbus
    api rootProject.ext.eventbus
    //butterknife
    api rootProject.ext.butterknife
    kapt rootProject.ext.butterknifeCompiler //需要所有使用 butterknife 的 model 都添加依赖
    //Arouter
    api rootProject.ext.arouterApi
    kapt rootProject.ext.arouterCompiler //需要所有使用 ARouter 的 model 都添加依赖

}

