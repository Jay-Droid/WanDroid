apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.jaydroid.wanandroid"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        kapt {
//            arguments {
//                arg("AROUTER_MODULE_NAME", project.getName(), "AROUTER_GENERATE_DOC","enable")
//            }
//        }

        javaCompileOptions {
            javaCompileOptions {
                annotationProcessorOptions {
                    arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
                }
            }
        }
    }

    signingConfigs {

        debug {
            keyAlias rootProject.ext.sign["aliasDebug"]
            keyPassword rootProject.ext.sign["passDebug"]
            storeFile rootProject.ext.sign["storeDebug"]
            storePassword rootProject.ext.sign["storePassDebug"]
        }
        release {
            keyAlias rootProject.ext.sign["alias"]
            keyPassword rootProject.ext.sign["pass"]
            storeFile rootProject.ext.sign["store"]
            storePassword rootProject.ext.sign["storePass"]
        }
    }

    buildTypes {
        //打包命令：
        // ./gradlew :app:wan:assembleDebug
        // ./gradlew :app:wan:assembleRelease

        debug {
            // Zipalign优化 true
            zipAlignEnabled false
            // 移除无用的resource文件 true
            shrinkResources false
            // 启用Android插件压缩器
            // useProguard true
            // 代码压缩/是否进行混淆 true
            minifyEnabled false
            // 签名信息
            signingConfig signingConfigs.debug
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明,后一部分是我们项目里的自定义的混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        release {
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 代码压缩/是否进行混淆
            minifyEnabled true
            // 签名信息
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    /**
     * 主业务组件
     */
    implementation project(path: ':biz_components:main')
//    implementation 'com.jaydroid.main:main:1.0.0'
//    implementation 'com.jaydroid.base_component_wan:base_component_wan:1.0.0'

    /**
     * 登陆组件
     */
    implementation project(path: ':biz_components:login')

    /**
     * 设置业务组件
     */
    runtimeOnly project(path: ':biz_components:setting')

    /**
     * 收藏业务组件
     */
    runtimeOnly project(path: ':biz_components:favorite')


    /**
     * 搜索业务组件
     */
    runtimeOnly project(path: ':biz_components:search')


    /**
     * 文章详情业务组件
     */
    runtimeOnly project(path: ':biz_components:detail')


    //初始的依赖
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies['kotlin-stdlib-jdk7']
    implementation rootProject.ext.dependencies['appcompat']
    implementation rootProject.ext.dependencies['core-ktx']
    implementation rootProject.ext.dependencies['constraintlayout']
    testImplementation rootProject.ext.dependencies['junit']
    androidTestImplementation rootProject.ext.dependencies['junit-androidx']
    androidTestImplementation rootProject.ext.dependencies['espresso-core-androidx']
    //其它依赖
    //arouter-compiler 的注解依赖需要所有使用 ARouter 的 model 都添加依赖
//    kapt rootProject.ext.dependencies['arouter-compiler']
    annotationProcessor rootProject.ext.dependencies['arouter-compiler']
}
