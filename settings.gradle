rootProject.name = 'wan'

include ':ja-app:wan'

include ':jc-base:base-common',
        ':jc-base:base-wan'

include ':jb-biz:biz-user',
        ':jb-biz:biz-setting',
        ':jb-biz:biz-main',
        ':jb-biz:biz-favorite',
        ':jb-biz:biz-search',
        ':jb-biz:biz-detail'

include ':jd-lib:lib-common',
        ':jd-lib:lib-net'






/*

#### 1.宿主壳：\app

- 壳工程依赖了需要集成的业务组件，它可能只有一些配置文件，没有任何代码逻辑。

- 根据你的需要选择集成你的业务组件，不同的业务组件就组成了不同的APP。

#### 2.业务组件：\biz

- 业务组件就是我们真正的体现在页面上的业务组件了，常规业务组件按需依赖基础业务组件和基础功能组件

- 我们通常按照功能模块来划分业务组件，例如：登录、首页、Feed列表、IM消息、详情页等组件，

- 这里的每个业务组件都是一个小的APP，借助组件壳都可以单独编译，单独打包成APK在手机上运行。

#### 3.基础业务组件：\base

 * 基础业务组件按需依赖功能层的组件，该层组件是对一些系统通用的业务能力进行封装的组件。
 * 例如公共业务组件，Application、BaseActivity、BaseFragment、mvp、mvvm 基类等；
 * 例如分享能力组件，其他业务只要集成该组件就能进行相关分享；
 * 例如共享公共数据，可以将用户登录信息缓存在这里等；
 * 例如共享公共资源，value、drawable、style 等；
 * 例如组件间数据通信的接口，ARouter 服务所需的IProvider 以及路由 path 等。

#### 4.功能组件：\lib

* 这层的组件都是最基础的功能，通常它不包含任何业务逻辑，
* 也可以说这些组件是一些通用的工具类和一些第三方库。
* 或者说只有足够优秀足够基础的代码才能下沉到基础层。
* 例如日志记录组件，它只是提供了日志记录的能力，你要记录什么样的日志，它并不关心；
* 例如图片加载组件，它是一个全局通用图片加载框架；
* 例如网络服务组件，它封装了网络的请求能力；
  ARouter path 使用注意实现
  ARouter:path必须以'/'开头，并且包含多于2 '/'的内容!
  ARouter:默认会用你申明的path的第一个/后面的字符用作group，不同组件之间的group不能相同

  组件之间需要遵循的规则：
  1. 只有上层的组件才能依赖下层组件，不能反向依赖，否则可能会出现循环依赖的情况；
  2. 同一层之间的组件不能相互依赖，如果需要通信需要借助 ARouter 等，这也是为了组件之间的彻底隔离与解耦
  3. 每个模块名称前面有个 ":"，表示的是相对于当前主工程的根目录， 如果将某几个组件放在一个二级目录下可以 :dir:module
 */


